// This file is automatically generated by Citron version 1.0.
//
// The parser class defined below conforms to the CitronParser protocol
// defined in CitronParser.swift. 
// 
// The authors of Citron disclaim copyright to the source code in this file.

// Preface


    enum Token {
        case keyword // for let, rec, int ..
        case punctuation // for (, ) ..
        case identifier(String) // for IDENTIFIER
        case integerLiteral(Int)
        case floatLiteral(Double)
        case boolLiteral(Bool)
    }

    extension Token {
        func asInt() -> Int { 
          switch self {
            case let .integerLiteral(i):
              return i
            default:
              fatalError("\(self) is not integer value.")
          }
        }

        func asFloat() -> Double { 
          switch self {
            case let .floatLiteral(f):
              return f
            default:
              fatalError("\(self) is not float value.")
          }
        }

        func asBool() -> Bool {
          switch self {
            case let .boolLiteral(b):
             return b
            default:
             fatalError("\(self) is not boolean value.")
          }
        }

        func asIdentifier() -> String {
          switch self {
            case let .identifier(id):
             return id
            default:
             fatalError("\(self) is not identifier.")
          }
        }
    }


// Parser class

import CitronKit

class Parser: CitronParser {

    // Types

    typealias CitronSymbolCode = UInt8
    typealias CitronStateNumber = UInt8
    typealias CitronRuleNumber = UInt8

    enum CitronTokenCode: CitronSymbolCode {
      case ADD                            =   1
      case SUB                            =   2
      case MUL                            =   3
      case DIV                            =   4
      case INT                            =   5
      case FLOAT                          =   6
      case BOOL                           =   7
      case IDENTIFIER                     =   8
      case L_BR                           =   9
      case R_BR                           =  10
      case IF                             =  11
      case THEN                           =  12
      case ELSE                           =  13
      case LET                            =  14
      case REC                            =  15
      case EQUAL                          =  16
      case IN                             =  17
    }

    typealias CitronToken = Token

    enum CitronSymbol {
        case yyBaseOfStack
        case yy0(CitronToken)
        case yy1(Const)
        case yy14([Var])
        case yy36([Expr])
        case yy38(Var)
        case yy52(Expr)
    }

    typealias CitronResult = Expr

    // Counts

    let yyNumberOfSymbols: Int = 26
    let yyNumberOfStates: Int = 32

    // Action tables

    let yyLookaheadAction: [(CitronSymbolCode, CitronParsingAction)] = [
/*   0 */  ( 5, .SR( 7)), ( 6, .SR( 8)), ( 7, .SR( 9)), ( 8, .SR(10)), (21, .RD(13)),
/*   5 */  (22, .RD(14)), (11, .SH( 8)), (24, .SH(13)), (25, .RD(16)), (14, .SH(17)),
/*  10 */  (18, .ACCEPT),   (19, .SH(24)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/*  15 */  ( 5, .SR( 7)), ( 6, .SR( 8)), ( 7, .SR( 9)), ( 8, .SR(10)), ( 9, .SH( 3)),
/*  20 */  ( 1, .SH(12)), ( 2, .SH(11)), ( 3, .SH(10)), ( 4, .SH( 9)), ( 1, .SH(12)),
/*  25 */  ( 2, .SH(11)), ( 3, .SH(10)), ( 4, .SH( 9)), ( 1, .SH(12)), ( 2, .SH(11)),
/*  30 */  ( 3, .SH(10)), ( 4, .SH( 9)), ( 8, .SR(10)), (10, .SR(15)), (22, .SH(15)),
/*  35 */  (23, .RD(11)), (17, .SH( 1)), (22, .SH(30)), ( 1, .SH(12)), ( 2, .SH(11)),
/*  40 */  ( 3, .SH(10)), ( 4, .SH( 9)), (22, .SH(15)), (23, .SH(31)), (17, .SH( 4)),
/*  45 */  (16, .SH( 2)), ( 1, .SH(12)), ( 2, .SH(11)), ( 3, .SH(10)), ( 4, .SH( 9)),
/*  50 */  (13, .SH( 6)), ( 0, .RD( 0)), ( 1, .SH(12)), ( 2, .SH(11)), ( 3, .SH(10)),
/*  55 */  ( 4, .SH( 9)), (22, .SH(16)), (12, .SH( 7)), (19, .SH(25)), (20, .RD( 5)),
/*  60 */  (21, .RD( 6)), (22, .SH(14)), ( 1, .SH(12)), ( 2, .SH(11)), ( 3, .SH(10)),
/*  65 */  ( 4, .SH( 9)), (19, .SH(19)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/*  70 */  (16, .SH( 5)), (19, .SH(20)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/*  75 */  (19, .SH(26)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)), (19, .SH(21)),
/*  80 */  (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)), ( 8, .SR(10)), ( 3, .SH(10)),
/*  85 */  ( 4, .SH( 9)), (19, .SH(27)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/*  90 */  (15, .SH(18)), (19, .SH(22)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/*  95 */  (19, .SH(23)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)), (19, .RD( 4)),
/* 100 */  (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)), (26, .RD( 2)), (26, .RD( 2)),
/* 105 */  (26, .RD( 2)), (19, .RD( 3)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/* 110 */  (26, .RD( 2)), (19, .SH(28)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)),
/* 115 */  (19, .SH(29)), (20, .RD( 5)), (21, .RD( 6)), (22, .SH(14)), (21, .RD(13)),
/* 120 */  (22, .RD(14)), (26, .RD( 2)), (24, .SH(13)), (25, .RD(21)),
    ]

    let yyShiftUseDefault: Int = 124
    let yyShiftOffsetMin: Int = -5
    let yyShiftOffsetMax: Int = 81
    let yyShiftOffset: [Int] = [
        /*     0 */    -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,   -5,
        /*    10 */    -5,   -5,   -5,   10,   10,   24,   24,   75,   24,   19,
        /*    20 */    23,   27,   37,   45,   51,   61,   61,   61,   81,   81,
        /*    30 */    29,   54,
    ]

    let yyReduceUseDefault: Int = -18
    let yyReduceOffsetMin: Int =   -17
    let yyReduceOffsetMax: Int =   98
    let yyReduceOffset: [Int] = [
        /*     0 */    -8,   39,   47,   52,   56,   60,   67,   72,   76,   80,
        /*    10 */    87,   92,   96,  -17,   98,   12,   20,   15,   34,
    ]

    let yyDefaultAction: [CitronParsingAction] = [
  /*     0 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*     5 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    10 */  .ERROR , .ERROR , .ERROR , .RD(17), .RD(22),
  /*    15 */  .RD(12), .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    20 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*    25 */  .RD(20), .RD(19), .RD(18), .RD( 2), .RD( 1),
  /*    30 */  .ERROR , .ERROR ,
    ]

    // Fallback

    let yyHasFallback: Bool = false
    let yyFallback: [CitronSymbolCode] = []

    // Wildcard

    let yyWildcard: CitronSymbolCode? = nil

    // Rules

    let yyRuleInfo: [(lhs: CitronSymbolCode, nrhs: UInt)] = [
        (lhs: 18, nrhs: 1),
        (lhs: 20, nrhs: 3),
        (lhs: 20, nrhs: 3),
        (lhs: 20, nrhs: 3),
        (lhs: 20, nrhs: 3),
        (lhs: 19, nrhs: 1),
        (lhs: 19, nrhs: 1),
        (lhs: 21, nrhs: 1),
        (lhs: 21, nrhs: 1),
        (lhs: 21, nrhs: 1),
        (lhs: 22, nrhs: 1),
        (lhs: 23, nrhs: 2),
        (lhs: 23, nrhs: 1),
        (lhs: 24, nrhs: 1),
        (lhs: 24, nrhs: 1),
        (lhs: 24, nrhs: 3),
        (lhs: 25, nrhs: 2),
        (lhs: 25, nrhs: 1),
        (lhs: 19, nrhs: 6),
        (lhs: 19, nrhs: 8),
        (lhs: 19, nrhs: 6),
        (lhs: 19, nrhs: 2),
        (lhs: 19, nrhs: 1),
    ]

    // Stack

    var yyStack: [(stateOrRule: CitronStateOrRule , symbolCode: CitronSymbolCode, symbol: CitronSymbol)]  = [
        (stateOrRule: .state(0), symbolCode: 0, symbol: .yyBaseOfStack)
    ]
    var maxStackSize: Int? = nil
    // Tracing

    var isTracingEnabled: Bool = false
    let yySymbolName: [String] = [
        "$",                   "ADD",                 "SUB",                 "MUL",         
        "DIV",                 "INT",                 "FLOAT",               "BOOL",        
        "IDENTIFIER",          "L_BR",                "R_BR",                "IF",          
        "THEN",                "ELSE",                "LET",                 "REC",         
        "EQUAL",               "IN",                  "root",                "expr",        
        "arithOps",            "const",               "var",                 "vars",        
        "arg",                 "args",        
    ]
    let yyRuleText: [String] = [
        /*   0 */ "root ::= expr(a)",
        /*   1 */ "arithOps ::= expr(a) ADD expr(b)",
        /*   2 */ "arithOps ::= expr(a) SUB expr(b)",
        /*   3 */ "arithOps ::= expr(a) MUL expr(b)",
        /*   4 */ "arithOps ::= expr(a) DIV expr(b)",
        /*   5 */ "expr ::= arithOps(a)",
        /*   6 */ "expr ::= const(a)",
        /*   7 */ "const ::= INT(a)",
        /*   8 */ "const ::= FLOAT(a)",
        /*   9 */ "const ::= BOOL(a)",
        /*  10 */ "var ::= IDENTIFIER(a)",
        /*  11 */ "vars ::= var(a) vars(list)",
        /*  12 */ "vars ::= var(a)",
        /*  13 */ "arg ::= const(a)",
        /*  14 */ "arg ::= var(a)",
        /*  15 */ "arg ::= L_BR expr(a) R_BR",
        /*  16 */ "args ::= arg(a) args(list)",
        /*  17 */ "args ::= arg(a)",
        /*  18 */ "expr ::= IF expr(a) THEN expr(b) ELSE expr(c)",
        /*  19 */ "expr ::= LET REC var(a) vars(b) EQUAL expr(c) IN expr(d)",
        /*  20 */ "expr ::= LET var(a) EQUAL expr(b) IN expr(c)",
        /*  21 */ "expr ::= var(a) args(b)",
        /*  22 */ "expr ::= var(a)",
    ]

    // Function definitions

    func yyTokenToSymbol(_ token: CitronToken) -> CitronSymbol {
        return .yy0(token)
    }

    func yyInvokeCodeBlockForRule(ruleNumber: CitronRuleNumber) throws -> CitronSymbol {
        switch (ruleNumber) {
        case 0: /* root ::= expr(a) */
            func codeBlockForRule00(a: Expr) throws -> Expr {
    return a
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule00(a: a))
            }
        case 1: /* arithOps ::= expr(a) ADD expr(b) */
            func codeBlockForRule01(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .add, args: [a, b])
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule01(a: a, b: b))
            }
        case 2: /* arithOps ::= expr(a) SUB expr(b) */
            func codeBlockForRule02(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .sub, args: [a, b])
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule02(a: a, b: b))
            }
        case 3: /* arithOps ::= expr(a) MUL expr(b) */
            func codeBlockForRule03(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .mul, args: [a, b])
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule03(a: a, b: b))
            }
        case 4: /* arithOps ::= expr(a) DIV expr(b) */
            func codeBlockForRule04(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .div, args: [a, b])
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule04(a: a, b: b))
            }
        case 5: /* expr ::= arithOps(a) */
            func codeBlockForRule05(a: Expr) throws -> Expr {
    return a
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule05(a: a))
            }
        case 6: /* expr ::= const(a) */
            func codeBlockForRule06(a: Const) throws -> Expr {
    return .const(const: a)
 }
            if case .yy1(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule06(a: a))
            }
        case 7: /* const ::= INT(a) */
            func codeBlockForRule07(a: Token) throws -> Const {
    return .integer(a.asInt())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy1(try codeBlockForRule07(a: a))
            }
        case 8: /* const ::= FLOAT(a) */
            func codeBlockForRule08(a: Token) throws -> Const {
    return .float(a.asFloat())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy1(try codeBlockForRule08(a: a))
            }
        case 9: /* const ::= BOOL(a) */
            func codeBlockForRule09(a: Token) throws -> Const {
    return .bool(a.asBool())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy1(try codeBlockForRule09(a: a))
            }
        case 10: /* var ::= IDENTIFIER(a) */
            func codeBlockForRule10(a: Token) throws -> Var {
    return Var(rawValue: a.asIdentifier())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy38(try codeBlockForRule10(a: a))
            }
        case 11: /* vars ::= var(a) vars(list) */
            func codeBlockForRule11(a: Var, list: [Var]) throws -> [Var] {
    return [a] + list
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 1),
               case .yy14(let list) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy14(try codeBlockForRule11(a: a, list: list))
            }
        case 12: /* vars ::= var(a) */
            func codeBlockForRule12(a: Var) throws -> [Var] {
    return [a]
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy14(try codeBlockForRule12(a: a))
            }
        case 13: /* arg ::= const(a) */
            func codeBlockForRule13(a: Const) throws -> Expr {
    return .const(const: a)
 }
            if case .yy1(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule13(a: a))
            }
        case 14: /* arg ::= var(a) */
            func codeBlockForRule14(a: Var) throws -> Expr {
    return .var(variable: a)
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule14(a: a))
            }
        case 15: /* arg ::= L_BR expr(a) R_BR */
            func codeBlockForRule15(a: Expr) throws -> Expr {
    return a
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy52(try codeBlockForRule15(a: a))
            }
        case 16: /* args ::= arg(a) args(list) */
            func codeBlockForRule16(a: Expr, list: [Expr]) throws -> [Expr] {
    return [a] + list
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 1),
               case .yy36(let list) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy36(try codeBlockForRule16(a: a, list: list))
            }
        case 17: /* args ::= arg(a) */
            func codeBlockForRule17(a: Expr) throws -> [Expr] {
    return [a]
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy36(try codeBlockForRule17(a: a))
            }
        case 18: /* expr ::= IF expr(a) THEN expr(b) ELSE expr(c) */
            func codeBlockForRule18(a: Expr, b: Expr, c: Expr) throws -> Expr {
    return .if(cond: a, ifTrue:b, ifFalse:c)
 }
            if case .yy52(let a) = yySymbolOnStack(distanceFromTop: 4),
               case .yy52(let b) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let c) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule18(a: a, b: b, c: c))
            }
        case 19: /* expr ::= LET REC var(a) vars(b) EQUAL expr(c) IN expr(d) */
            func codeBlockForRule19(a: Var, b: [Var], c: Expr, d: Expr) throws -> Expr {
    return .letRec(name: a, args: b, bind: c, body: d)
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 5),
               case .yy14(let b) = yySymbolOnStack(distanceFromTop: 4),
               case .yy52(let c) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let d) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule19(a: a, b: b, c: c, d: d))
            }
        case 20: /* expr ::= LET var(a) EQUAL expr(b) IN expr(c) */
            func codeBlockForRule20(a: Var, b: Expr, c: Expr) throws -> Expr {
    return .let(varName: a, bind: b, body: c)
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 4),
               case .yy52(let b) = yySymbolOnStack(distanceFromTop: 2),
               case .yy52(let c) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule20(a: a, b: b, c: c))
            }
        case 21: /* expr ::= var(a) args(b) */
            func codeBlockForRule21(a: Var, b: [Expr]) throws -> Expr {
    return .apply(function: a, args: b)
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 1),
               case .yy36(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule21(a: a, b: b))
            }
        case 22: /* expr ::= var(a) */
            func codeBlockForRule22(a: Var) throws -> Expr {
    return .var(variable: a)
 }
            if case .yy38(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy52(try codeBlockForRule22(a: a))
            }
        default:
            fatalError("Can't invoke code block for rule number \(ruleNumber) - no such rule")
        }
        fatalError("Can't resolve types correctly for invoking code block for rule number \(ruleNumber)")
    }

    private func yySymbolOnStack(distanceFromTop: Int) -> CitronSymbol {
        assert(yyStack.count > distanceFromTop)
        return yyStack[yyStack.count - 1 - distanceFromTop].symbol
    }

    func yyUnwrapResultFromSymbol(_ symbol: CitronSymbol) -> CitronResult {
        if case .yy52(let result) = symbol {
            return result
        } else {
            fatalError("Unexpected mismatch in result type")
        }
    }

}

