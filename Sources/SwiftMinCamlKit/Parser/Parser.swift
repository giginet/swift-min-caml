// This file is automatically generated by Citron version 1.0.
//
// The parser class defined below conforms to the CitronParser protocol
// defined in CitronParser.swift.
//
// The authors of Citron disclaim copyright to the source code in this file.

// Parser class

import CitronKit

class Parser: CitronParser {
    // Types

    typealias CitronSymbolCode = UInt8
    typealias CitronStateNumber = UInt8
    typealias CitronRuleNumber = UInt8

    enum CitronTokenCode: CitronSymbolCode {
        case ADD = 1
        case SUB = 2
        case MUL = 3
        case DIV = 4
        case L_PAREN = 5
        case R_PAREN = 6
        case BOOL = 7
        case INT = 8
        case FLOAT = 9
        case IDENTIFIER = 10
        case DOT = 11
    }

    typealias CitronToken = Token

    enum CitronSymbol {
        case yyBaseOfStack
        case yy0(CitronToken)
        case yy28(Expr)
    }

    typealias CitronResult = Expr

    // Counts

    let yyNumberOfSymbols: Int = 16
    let yyNumberOfStates: Int = 14

    // Action tables

    let yyLookaheadAction: [(CitronSymbolCode, CitronParsingAction)] = [
        /*   0 */ (5, .SH(1)), (6, .SR(2)), (7, .SR(3)), (8, .SR(4)), (9, .SR(5)),
        /*   5 */ (10, .SR(6)), (5, .SH(1)), (5, .SH(4)), (7, .SR(3)), (8, .SR(4)),
        /*  10 */ (9, .SR(5)), (10, .SR(6)), (1, .SH(6)), (2, .SH(5)), (3, .SH(3)),
        /*  15 */ (4, .SH(2)), (11, .SH(12)), (6, .SR(7)), (16, .RD(2)), (1, .SH(6)),
        /*  20 */ (2, .SH(5)), (3, .SH(3)), (4, .SH(2)), (16, .RD(2)), (6, .SR(1)),
        /*  25 */ (0, .RD(0)), (1, .SH(6)), (2, .SH(5)), (3, .SH(3)), (4, .SH(2)),
        /*  30 */ (3, .SH(3)), (4, .SH(2)), (12, .ACCEPT), (13, .SH(9)), (14, .SH(13)),
        /*  35 */ (13, .SH(8)), (14, .SH(13)), (16, .RD(2)), (16, .RD(2)), (13, .RD(12)),
        /*  40 */ (14, .SH(13)), (13, .RD(11)), (14, .SH(13)), (13, .SH(7)), (14, .SH(13)),
        /*  45 */ (16, .RD(2)), (13, .SH(11)), (14, .SH(13)), (13, .SH(10)), (14, .SH(13)),
    ]

    let yyShiftUseDefault: Int = 50
    let yyShiftOffsetMin: Int = -5
    let yyShiftOffsetMax: Int = 27
    let yyShiftOffset: [Int] = [
        /*     0 */ 1, -5, 1, 1, 1, 1, 1, 11, 18, 25,
        /*    10 */ 27, 27, 2, 5,
    ]

    let yyReduceUseDefault: Int = -1
    let yyReduceOffsetMin: Int = 0
    let yyReduceOffsetMax: Int = 35
    let yyReduceOffset: [Int] = [
        /*     0 */ 20, 22, 26, 28, 30, 33, 35,
    ]

    let yyDefaultAction: [CitronParsingAction] = [
        /*     0 */ .ERROR, .ERROR, .ERROR, .ERROR, .ERROR,
        /*     5 */ .ERROR, .ERROR, .ERROR, .ERROR, .ERROR,
        /*    10 */ .RD(9), .RD(10), .ERROR, .RD(8),
    ]

    // Fallback

    let yyHasFallback: Bool = false
    let yyFallback: [CitronSymbolCode] = []

    // Wildcard

    let yyWildcard: CitronSymbolCode? = nil

    // Rules

    let yyRuleInfo: [(lhs: CitronSymbolCode, nrhs: UInt)] = [
        (lhs: 12, nrhs: 1),
        (lhs: 14, nrhs: 3),
        (lhs: 14, nrhs: 2),
        (lhs: 14, nrhs: 1),
        (lhs: 14, nrhs: 1),
        (lhs: 14, nrhs: 1),
        (lhs: 14, nrhs: 1),
        (lhs: 14, nrhs: 5),
        (lhs: 13, nrhs: 1),
        (lhs: 13, nrhs: 3),
        (lhs: 13, nrhs: 3),
        (lhs: 13, nrhs: 3),
        (lhs: 13, nrhs: 3),
    ]

    // Stack

    var yyStack: [(stateOrRule: CitronStateOrRule, symbolCode: CitronSymbolCode, symbol: CitronSymbol)] = [
        (stateOrRule: .state(0), symbolCode: 0, symbol: .yyBaseOfStack),
    ]
    var maxStackSize: Int?
    // Tracing

    var isTracingEnabled: Bool = false
    let yySymbolName: [String] = [
        "$", "ADD", "SUB", "MUL",
        "DIV", "L_PAREN", "R_PAREN", "BOOL",
        "INT", "FLOAT", "IDENTIFIER", "DOT",
        "root", "expr", "simple_expr", "var",
    ]
    let yyRuleText: [String] = [
        /*   0 */ "root ::= expr(e)",
        /*   1 */ "simple_expr ::= L_PAREN expr(e) R_PAREN",
        /*   2 */ "simple_expr ::= L_PAREN R_PAREN",
        /*   3 */ "simple_expr ::= BOOL(t)",
        /*   4 */ "simple_expr ::= INT(t)",
        /*   5 */ "simple_expr ::= FLOAT(t)",
        /*   6 */ "simple_expr ::= IDENTIFIER(t)",
        /*   7 */ "simple_expr ::= simple_expr(e1) DOT L_PAREN expr(e2) R_PAREN",
        /*   8 */ "expr ::= simple_expr(e)",
        /*   9 */ "expr ::= expr(lhs) ADD expr(rhs)",
        /*  10 */ "expr ::= expr(lhs) SUB expr(rhs)",
        /*  11 */ "expr ::= expr(lhs) MUL expr(rhs)",
        /*  12 */ "expr ::= expr(lhs) DIV expr(rhs)",
    ]

    // Function definitions

    func yyTokenToSymbol(_ token: CitronToken) -> CitronSymbol {
        return .yy0(token)
    }

    func yyInvokeCodeBlockForRule(ruleNumber: CitronRuleNumber) throws -> CitronSymbol {
        switch ruleNumber {
        case 0: /* root ::= expr(e) */
            func codeBlockForRule00(e: Expr) throws -> Expr {
                return e
            }
            if case let .yy28(e) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule00(e: e))
            }
        case 1: /* simple_expr ::= L_PAREN expr(e) R_PAREN */
            func codeBlockForRule01(e: Expr) throws -> Expr {
                return e
            }
            if case let .yy28(e) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy28(try codeBlockForRule01(e: e))
            }
        case 2: /* simple_expr ::= L_PAREN R_PAREN */
            func codeBlockForRule02() throws -> Expr {
                return .unit
            }
            return .yy28(try codeBlockForRule02())
        case 3: /* simple_expr ::= BOOL(t) */
            func codeBlockForRule03(t: Token) throws -> Expr {
                return .bool(t.asBool())
            }
            if case let .yy0(t) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule03(t: t))
            }
        case 4: /* simple_expr ::= INT(t) */
            func codeBlockForRule04(t: Token) throws -> Expr {
                return .int(t.asInt())
            }
            if case let .yy0(t) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule04(t: t))
            }
        case 5: /* simple_expr ::= FLOAT(t) */
            func codeBlockForRule05(t: Token) throws -> Expr {
                return .float(t.asFloat())
            }
            if case let .yy0(t) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule05(t: t))
            }
        case 6: /* simple_expr ::= IDENTIFIER(t) */
            func codeBlockForRule06(t: Token) throws -> Expr {
                return .var(name: t.asID())
            }
            if case let .yy0(t) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule06(t: t))
            }
        case 7: /* simple_expr ::= simple_expr(e1) DOT L_PAREN expr(e2) R_PAREN */
            func codeBlockForRule07(e1: Expr, e2: Expr) throws -> Expr {
                return .get(array: e1, index: e2)
            }
            if case let .yy28(e1) = yySymbolOnStack(distanceFromTop: 4),
                case let .yy28(e2) = yySymbolOnStack(distanceFromTop: 1) {
                return .yy28(try codeBlockForRule07(e1: e1, e2: e2))
            }
        case 8: /* expr ::= simple_expr(e) */
            func codeBlockForRule08(e: Expr) throws -> Expr {
                return e
            }
            if case let .yy28(e) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule08(e: e))
            }
        case 9: /* expr ::= expr(lhs) ADD expr(rhs) */
            func codeBlockForRule09(lhs: Expr, rhs: Expr) throws -> Expr {
                return .add(lhs: lhs, rhs: rhs)
            }
            if case let .yy28(lhs) = yySymbolOnStack(distanceFromTop: 2),
                case let .yy28(rhs) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule09(lhs: lhs, rhs: rhs))
            }
        case 10: /* expr ::= expr(lhs) SUB expr(rhs) */
            func codeBlockForRule10(lhs: Expr, rhs: Expr) throws -> Expr {
                return .sub(lhs: lhs, rhs: rhs)
            }
            if case let .yy28(lhs) = yySymbolOnStack(distanceFromTop: 2),
                case let .yy28(rhs) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule10(lhs: lhs, rhs: rhs))
            }
        case 11: /* expr ::= expr(lhs) MUL expr(rhs) */
            func codeBlockForRule11(lhs: Expr, rhs: Expr) throws -> Expr {
                return .sub(lhs: lhs, rhs: rhs)
            }
            if case let .yy28(lhs) = yySymbolOnStack(distanceFromTop: 2),
                case let .yy28(rhs) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule11(lhs: lhs, rhs: rhs))
            }
        case 12: /* expr ::= expr(lhs) DIV expr(rhs) */
            func codeBlockForRule12(lhs: Expr, rhs: Expr) throws -> Expr {
                return .div(lhs: lhs, rhs: rhs)
            }
            if case let .yy28(lhs) = yySymbolOnStack(distanceFromTop: 2),
                case let .yy28(rhs) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy28(try codeBlockForRule12(lhs: lhs, rhs: rhs))
            }
        default:
            fatalError("Can't invoke code block for rule number \(ruleNumber) - no such rule")
        }
        fatalError("Can't resolve types correctly for invoking code block for rule number \(ruleNumber)")
    }

    private func yySymbolOnStack(distanceFromTop: Int) -> CitronSymbol {
        assert(yyStack.count > distanceFromTop)
        return yyStack[yyStack.count - 1 - distanceFromTop].symbol
    }

    func yyUnwrapResultFromSymbol(_ symbol: CitronSymbol) -> CitronResult {
        if case let .yy28(result) = symbol {
            return result
        } else {
            fatalError("Unexpected mismatch in result type")
        }
    }
}
