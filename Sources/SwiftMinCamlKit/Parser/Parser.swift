// This file is automatically generated by Citron version 1.0.
//
// The parser class defined below conforms to the CitronParser protocol
// defined in CitronParser.swift. 
// 
// The authors of Citron disclaim copyright to the source code in this file.

// Preface


    enum Token {
        case keyword // for let, rec, int ..
        case punctuation // for (, ) ..
        case identifier(String) // for IDENTIFIER
        case integerLiteral(Int)
        case floatLiteral(Double)
        case boolLiteral(Bool)
    }

    extension Token {
        func asInt() -> Int { 
          switch self {
            case let .integerLiteral(i):
              return i
            default:
              fatalError("\(self) is not integer value.")
          }
        }

        func asFloat() -> Double { 
          switch self {
            case let .floatLiteral(f):
              return f
            default:
              fatalError("\(self) is not float value.")
          }
        }

        func asBool() -> Bool {
            switch self {
                case let .boolLiteral(b):
                return b
                default:
                fatalError("\(self) is not boolean value.")
            }
        }
    }


// Parser class

import CitronKit

class Parser: CitronParser {

    // Types

    typealias CitronSymbolCode = UInt8
    typealias CitronStateNumber = UInt8
    typealias CitronRuleNumber = UInt8

    enum CitronTokenCode: CitronSymbolCode {
      case ADD                            =   1
      case SUB                            =   2
      case MUL                            =   3
      case DIV                            =   4
      case INT                            =   5
      case FLOAT                          =   6
      case BOOL                           =   7
    }

    typealias CitronToken = Token

    enum CitronSymbol {
        case yyBaseOfStack
        case yy0(CitronToken)
        case yy6(Expr)
        case yy16(Const)
    }

    typealias CitronResult = Expr

    // Counts

    let yyNumberOfSymbols: Int = 11
    let yyNumberOfStates: Int = 8

    // Action tables

    let yyLookaheadAction: [(CitronSymbolCode, CitronParsingAction)] = [
/*   0 */  ( 0, .RD( 0)), ( 1, .SH( 4)), ( 2, .SH( 3)), ( 3, .SH( 2)), ( 4, .SH( 1)),
/*   5 */  (11, .RD( 2)), ( 5, .SR( 6)), ( 6, .SR( 7)), ( 7, .SR( 8)), (11, .RD( 2)),
/*  10 */  ( 8, .ACCEPT),   ( 9, .SH( 5)), (10, .RD( 5)), ( 9, .RD( 4)), (10, .RD( 5)),
/*  15 */  (11, .RD( 2)), ( 9, .RD( 3)), (10, .RD( 5)), ( 9, .SH( 6)), (10, .RD( 5)),
/*  20 */  ( 9, .SH( 7)), (10, .RD( 5)), ( 3, .SH( 2)), ( 4, .SH( 1)),
    ]

    let yyShiftUseDefault: Int = 24
    let yyShiftOffsetMin: Int = 0
    let yyShiftOffsetMax: Int = 19
    let yyShiftOffset: [Int] = [
        /*     0 */     1,    1,    1,    1,    1,    0,   19,   19,
    ]

    let yyReduceUseDefault: Int = -1
    let yyReduceOffsetMin: Int =   0
    let yyReduceOffsetMax: Int =   11
    let yyReduceOffset: [Int] = [
        /*     0 */     2,    4,    7,    9,   11,
    ]

    let yyDefaultAction: [CitronParsingAction] = [
  /*     0 */  .ERROR , .ERROR , .ERROR , .ERROR , .ERROR ,
  /*     5 */  .ERROR , .RD( 2), .RD( 1),
    ]

    // Fallback

    let yyHasFallback: Bool = false
    let yyFallback: [CitronSymbolCode] = []

    // Wildcard

    let yyWildcard: CitronSymbolCode? = nil

    // Rules

    let yyRuleInfo: [(lhs: CitronSymbolCode, nrhs: UInt)] = [
        (lhs: 8, nrhs: 1),
        (lhs: 9, nrhs: 3),
        (lhs: 9, nrhs: 3),
        (lhs: 9, nrhs: 3),
        (lhs: 9, nrhs: 3),
        (lhs: 9, nrhs: 1),
        (lhs: 10, nrhs: 1),
        (lhs: 10, nrhs: 1),
        (lhs: 10, nrhs: 1),
    ]

    // Stack

    var yyStack: [(stateOrRule: CitronStateOrRule , symbolCode: CitronSymbolCode, symbol: CitronSymbol)]  = [
        (stateOrRule: .state(0), symbolCode: 0, symbol: .yyBaseOfStack)
    ]
    var maxStackSize: Int? = nil
    // Tracing

    var isTracingEnabled: Bool = false
    let yySymbolName: [String] = [
        "$",                   "ADD",                 "SUB",                 "MUL",         
        "DIV",                 "INT",                 "FLOAT",               "BOOL",        
        "root",                "expr",                "const",       
    ]
    let yyRuleText: [String] = [
        /*   0 */ "root ::= expr(a)",
        /*   1 */ "expr ::= expr(a) ADD expr(b)",
        /*   2 */ "expr ::= expr(a) SUB expr(b)",
        /*   3 */ "expr ::= expr(a) MUL expr(b)",
        /*   4 */ "expr ::= expr(a) DIV expr(b)",
        /*   5 */ "expr ::= const(a)",
        /*   6 */ "const ::= INT(a)",
        /*   7 */ "const ::= FLOAT(a)",
        /*   8 */ "const ::= BOOL(a)",
    ]

    // Function definitions

    func yyTokenToSymbol(_ token: CitronToken) -> CitronSymbol {
        return .yy0(token)
    }

    func yyInvokeCodeBlockForRule(ruleNumber: CitronRuleNumber) throws -> CitronSymbol {
        switch (ruleNumber) {
        case 0: /* root ::= expr(a) */
            func codeBlockForRule0(a: Expr) throws -> Expr {
    return a
 }
            if case .yy6(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy6(try codeBlockForRule0(a: a))
            }
        case 1: /* expr ::= expr(a) ADD expr(b) */
            func codeBlockForRule1(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .add, args: [a, b])
 }
            if case .yy6(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy6(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy6(try codeBlockForRule1(a: a, b: b))
            }
        case 2: /* expr ::= expr(a) SUB expr(b) */
            func codeBlockForRule2(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .sub, args: [a, b])
 }
            if case .yy6(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy6(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy6(try codeBlockForRule2(a: a, b: b))
            }
        case 3: /* expr ::= expr(a) MUL expr(b) */
            func codeBlockForRule3(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .mul, args: [a, b])
 }
            if case .yy6(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy6(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy6(try codeBlockForRule3(a: a, b: b))
            }
        case 4: /* expr ::= expr(a) DIV expr(b) */
            func codeBlockForRule4(a: Expr, b: Expr) throws -> Expr {
    return .arithOps(ops: .div, args: [a, b])
 }
            if case .yy6(let a) = yySymbolOnStack(distanceFromTop: 2),
               case .yy6(let b) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy6(try codeBlockForRule4(a: a, b: b))
            }
        case 5: /* expr ::= const(a) */
            func codeBlockForRule5(a: Const) throws -> Expr {
    return .const(const: a)
 }
            if case .yy16(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy6(try codeBlockForRule5(a: a))
            }
        case 6: /* const ::= INT(a) */
            func codeBlockForRule6(a: Token) throws -> Const {
    return .integer(a.asInt())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy16(try codeBlockForRule6(a: a))
            }
        case 7: /* const ::= FLOAT(a) */
            func codeBlockForRule7(a: Token) throws -> Const {
    return .float(a.asFloat())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy16(try codeBlockForRule7(a: a))
            }
        case 8: /* const ::= BOOL(a) */
            func codeBlockForRule8(a: Token) throws -> Const {
    return .bool(a.asBool())
 }
            if case .yy0(let a) = yySymbolOnStack(distanceFromTop: 0) {
                return .yy16(try codeBlockForRule8(a: a))
            }
        default:
            fatalError("Can't invoke code block for rule number \(ruleNumber) - no such rule")
        }
        fatalError("Can't resolve types correctly for invoking code block for rule number \(ruleNumber)")
    }

    private func yySymbolOnStack(distanceFromTop: Int) -> CitronSymbol {
        assert(yyStack.count > distanceFromTop)
        return yyStack[yyStack.count - 1 - distanceFromTop].symbol
    }

    func yyUnwrapResultFromSymbol(_ symbol: CitronSymbol) -> CitronResult {
        if case .yy6(let result) = symbol {
            return result
        } else {
            fatalError("Unexpected mismatch in result type")
        }
    }

}

