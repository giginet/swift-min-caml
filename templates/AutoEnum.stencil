{% for enum in types.implementing.AutoEnum|enum %}
public extension {{ enum.name }} {
  {% for case in enum.cases %} 
  public var is{{ case.name|replace:"`",""|upperFirstLetter }}: Bool {
    switch self {
      case .{{ case.name }}: return true
      default: return false
    }
  }

  {% if case.associatedValues.count == 0 %}

  {% elif case.associatedValues.count == 1 %}
  public var as{{ case.name|replace:"`",""|upperFirstLetter }}: {{case.associatedValues.first.typeName}}? {
    switch self {
    case let .{{ case.name }}({{case.associatedValues.first.localName|default:case.name}}):
      return {{case.associatedValues.first.localName|default:case.name}}
    default:
      return nil
    }
  }
  {% else %}
  public struct {{ case.name|replace:"`",""|upperFirstLetter }}{{enum.name}} {
    {% for associatedValue in case.associatedValues %}
    public let {{associatedValue.localName|default:case.name}}: {{associatedValue.typeName}}
    {% endfor %}
  }

  public var as{{ case.name|replace:"`",""|upperFirstLetter }}: {{ case.name|replace:"`",""|upperFirstLetter }}{{enum.name}}? {
    switch self {
    case let .{{ case.name }}({% for v in case.associatedValues %}{{v.localName}}{% ifnot forloop.last %}, {% endif %}{% endfor %}):
      return {{ case.name|replace:"`",""|upperFirstLetter }}{{enum.name}} (
        {% for v in case.associatedValues %}
        {{v.localName|default:case.name}}: {{v.localName}}{% ifnot forloop.last %},{% endif %}
        {% endfor %}
      )
    default:
      return nil
    }
  }
  {% endif %}

  {% endfor %}
}
{% endfor %}
