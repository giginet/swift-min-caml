{% for enum in types.implementing.AutoTyped|enum %}
public indirect enum Typed{{ enum.name }} {
    {% for case in enum.cases %}
    case {{ case.name }}({% for associatedValue in case.associatedValues %}{{associatedValue.localName}}: {% if associatedValue.typeName.name == "[Expr]" %}[TypedExpr]{% else %}{% if associatedValue.typeName.name == enum.name %}Typed{% endif %}{{associatedValue.typeName}}{% endif %}, {% endfor %}type: Type)
    {% endfor %}
}

public extension Typed{{ enum.name }} {
    var type: Type {
        switch self {
            {% for case in enum.cases %}
            case let .{{ case.name }}({% for associatedValue in case.associatedValues %}_, {% endfor %}type):
                return type
            {% endfor %}
        }
    }

    func untyped() -> {{ enum.name }} {
        switch self {
        {% for case in enum.cases %}
            case let .{{ case.name }}({% for associatedValue in case.associatedValues %}{{associatedValue.localName}}, {% endfor %}_):
                return .{{ case.name }}({% for associatedValue in case.associatedValues %}{{associatedValue.localName}}: {% if associatedValue.typeName.name == "Expr" %}{{associatedValue.localName}}.untyped(){% else %}{% if associatedValue.typeName.name == "[Expr]" %}{{associatedValue.localName}}.map { $0.untyped() }{% else %} {{associatedValue.localName}}{% endif %}{% endif %}{% ifnot forloop.last %}, {% endif %}{% endfor %})
            {% endfor %}
        }
    }
}

public extension {{ enum.name }} {
    func constraintTyping() -> Typed{{ enum.name }} {
        switch self {
        {% for case in enum.cases %}
        {% if case.name == "const" %}
        case let .const(const):
            return .const(const: const, type: Typing.type(const: const))
        {% else %}
            case let .{{ case.name }}({% for associatedValue in case.associatedValues %}{{associatedValue.localName}}{% ifnot forloop.last %}, {% endif %}{% endfor %}):
                return .{{ case.name }}({% for associatedValue in case.associatedValues %}{{associatedValue.localName}}: {% if associatedValue.typeName.name == "Expr" %}{{associatedValue.localName}}.constraintTyping(){% else %}{% if associatedValue.typeName.name == "[Expr]" %}{{associatedValue.localName}}.map { $0.constraintTyping() }{% else %}{{associatedValue.localName}}{% endif %}{% endif %}, {% endfor %}type: Type.newTypeVar())
        {% endif %}
        {% endfor %}
        }
    }
}

{% endfor %}

